What happens when you initialize a repository? Why do you need to do it?

When I initialize a Git repository, Git does not create any commits, but it does create an empty Git repository. We initialize a Git repository and run command git status to make sure that the .git file is actually a .git file, meaning, it will have no commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

How is the staging area different than the working directory and the repository?

The working directory is the directory of files that are stored on your computer's hard-drive. Both the working directory and the repository are directories, however, the repository is created using the command git init, stores hidden metadata about the history of the repository, and when created, is empty. The repository will store your commits. The staging area is where a person adds changes/files from the working directory that are to be committed into the repository.

How can you use the staging area to make sure you have one commit per logical change?

Using the command 'git diff --staged' allows the user to view the staging area before making a commit. If there are any unwanted changes in the staging area from the working directory, the user can unstage/remove a staged file from the staging area using the command 'git reset HEAD filename' before committing changes to the repository. Command 'git reset --hard' should be used with caution as it will reset any changes made to the working directory and the staging area. These changes will not be recoverable.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Some situations in which branches would be helpful in keeping our history organized would be to allow the user to make experimental changes to a commit, or, to make a version of your project in a different language or with different features, etc. Also, if you checkout a branch, and then make a commit, the branch label automatically updates to the new commit.
